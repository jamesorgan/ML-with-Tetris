関数や変数の説明とか（まだ途中）

//▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽
//   キー入力状態の取得関数
//▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲

int getPressState(プレイヤー番号, キー番号);	// 押しつづけありのバージョン
int getPushState(プレイヤー番号, キー番号);	// 押しつづけなしのバージョン

	移動ボタンや回転ボタンが押されているかどうかを判定する関数です。
	押されていれば非0、押されてなければ0を返します。
	getPressStateは押しっぱなしにしていても非0を返しますが、getPushStateは押された瞬間だけ非0を返します。

	【キー番号一覧】
	0:上
	1:下
	2:左
	3:右
	4:A
	5:B
	6:C
	7:D
	8:E
	9:F

//▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽
//   フィールドの状態の取得・変更
//▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲

int getFieldBlock(プレイヤー番号, X座標, Y座標);	// 取得
void setFieldBlock(プレイヤー番号, X座標, Y座標, ブロックの種類);	// 変更

	フィールドの状態を取得・変更します。
	X座標には0〜9、Y座標には0〜21を指定できます。
	範囲外（x≦-1、x≧10、y≧22）の座標を指定した場合、getFieldBlockは-1を返し、setFieldBlockは何もしません。
	フィールドよりも上（y≦-1）の座標を指定した場合、getFieldBlockは-2を返し、setFieldBlockは何もしません。
	範囲内を指定した場合は、getFieldBlockはフィールドの状態を返し、setFieldBlockはフィールドの状態を書き換えます。

	【値の一覧】
	0:なし
	1:灰
	2:赤
	3:橙
	4:黄
	5:緑
	6:水
	7:青
	8:紫
	9:[]白
	10:[]灰
	11:プラチナ赤
	12:プラチナ橙
	13:プラチナ黄
	14:プラチナ緑
	15:プラチナ水
	16:プラチナ青
	17:プラチナ紫

int getFieldBlockT(プレイヤー番号, X座標, Y座標);	// フィールドタイマー取得
void setFieldBlockT(プレイヤー番号, X座標, Y座標, 設定する値);	// フィールドタイマー変更

	ブロックが半透明かどうか・見えるかどうかを取得・変更します。

	【値の一覧】
	-10:枠線だけ見える
	-1:見える（普通のブロック）
	0:見えない（そこに存在はする）
	1〜8:半透明

int getFieldBlockO(プレイヤー番号, X座標, Y座標);	// ご先祖様フラグ取得
void setFieldBlockO(プレイヤー番号, X座標, Y座標, 設定する値);	// ご先祖様フラグ変更

	ブロックが[]で表示されるかどうかを取得・変更します。

	【値の一覧】
	0:[]で表示しない
	1:[]で表示する

int getFieldBlockL(プレイヤー番号, X座標, Y座標);	// ブロックの繋がりフラグ取得
void setFieldBlockL(プレイヤー番号, X座標, Y座標, 設定する値);	// ブロックの繋がりフラグ変更

	ブロックの繋がりに関するデータを取得・変更します。（BIGモードは未対応）

	【各ビットの意味（BitTest関数で各ビットの状態を取得可能・BitSet関数で各ビットの状態を変更可能）】
	0:上に繋がっている
	1:下に繋がっている
	2:左に繋がっている
	3:右に繋がっている

int getFieldBlockI(プレイヤー番号, X座標, Y座標);	// アイテムフラグ取得
void setFieldBlockI(プレイヤー番号, X座標, Y座標, 設定する値);	// アイテムフラグ変更

	ブロックがアイテムかどうかを取得・変更します。
	（プラグイン側が実施しない限り、アイテムはブロックの見た目を変更することしかしません）

	【値の一覧】
	0:なし
	1:MIRROR BLOCK
	2:ROLL ROLL
	3:DEATH BLOCK
	4:X-RAY
	5:COLOR BLOCK
	6:ROTATE LOCK
	7:HIDE NEXT
	8:MAGNET BLOCK
	9:TIME STOP
	10:HOLD LOCK
	11:→← REVERSE
	12:BOOST FIRE
	13:FEVER!
	14:↑↓ REVERSE
	15:REMOTE CONTROL
	16:DARK BLOCK
	17:↑ DEL FIELD
	18:↓ DEL FIELD
	19:DEL EVEN
	20:TRANS FORM
	21:LASER
	22:NEGA FIELD
	23:SHOT GUN!
	24:EXCHG FIELD
	25:HARD BLOCK
	26:SHUFFLE FIELD
	27:RANDOM
	28:FREE FALL
	29:← MOV FIELD
	30:→ MOV FIELD
	31:180 FIELD
	32:16t
	33:REFLECT
	34:DOUBLE
	35:ALL CLEAR
	36:スカ
	37:COPY FIELD
	38:FAKE NEXT
	39:[] BLOCK
	40:
	41:
	42:
	43:ハードブロック
	44:銀スクウェア
	45:金スクウェア

int checkFieldTop(プレイヤー番号);	// 現在のフィールドの最上段を返す
int checkFieldTopEx(プレイヤー番号, X座標);	// X座標を指定できるバージョン

	現在のフィールドの最上段を返す関数です。

int checkHowManyBlocks(プレイヤー番号);	// フィールド上にあるブロックの数を返す
int checkHowManyPBlocks(プレイヤー番号);	// プラチナブロックだけカウント

	フィールド上にあるブロックの数を返す関数です。

int isBravo(プレイヤー番号);	// 全消しチェック

	フィールドが空っぽかどうか判定します。空でなければ0、空であれば1を返します。

//▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽
//  擬似乱数・絶対値・ビット演算
//▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲

int GiziRand(プレイヤー番号, 範囲);	// 擬似乱数を取得（リプレイ対応）

	0〜（範囲-1）までのランダムな数値を取得します。結果はリプレイに自動的に保存され、再生時に再現されます。

int abs(数値);	// 絶対値を取得

	絶対値を取得します。与えられた数値がマイナスならプラスにしたものを返し、与えられた数値が0以上ならそのまま同じ数値を返します。

int BitTest(変数, 調べるビット);	// ビットの状態を調べる

	与えられた変数の特定のビットの状態を取得します。

int BitSet(変数, 変えるビット, 変更後のビットの状態);	// ビットの状態を変える

	与えられた変数の特定のビットの状態を変更します。変更後の変数が戻り値になります。
	（この関数は与えられた変数を直接書き換えることはしません）

//▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽
//   各種読み込み関数
//▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲

int loadGraphics(3, "ファイル名");	// 画像ファイルを読み込み

	画像ファイルをgraphicsフォルダ以下から読み込みます。（高解像度モードではgraphicshiフォルダから読み込み）
	戻り値はプレーン番号（画像ファイルを識別する番号）になります。

int createNewSurface(3, 横幅, 縦幅);	// サーフェイス作成

	新しいサーフェイスを作成します。
	サーフェイスはygs2kに搭載されているSwapToSecondary関数を使った処理で必要になります。それ以外ではほとんど使いません。

int loadSE(3, "フォルダ名/ファイル名");	// 効果音読み込み

	効果音を読み込みます。
	戻り値はチャンネル番号（効果音ファイルを識別する番号）になります。

void loadBGM(BGM番号);	// BGMを読み込み

	指定された番号のBGMをメモリ上に読み込みます。読み込んだBGMはタイトル画面に戻ったときにメモリ上から解放されます。
	読み込むだけで再生は行いません。
	BGMのファイル名はheboris.iniで変更可能です。

//▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽▼▽
//   デバッグログ
//▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲△▲

void debugLogRule(str *msg);	// デバッグログを出力（ルール用）
void debugLogMode(str *msg);	// デバッグログを出力（モード用）

	デバッグログを出力します。heboris.iniでデバッグモードが有効になっている場合のみ効果があります。
