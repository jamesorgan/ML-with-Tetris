プラグインの仕様書みたいなもの 永遠のv0.01beta

まだ完成してません。とても分かりにくいけど我慢してorz
これを読んでも参考にはなりませんので、付属のプラグインや本体のソースを眺めたり適当に改造したりしてください。

【目次】
・プラグインについて
・プラグインを呼び出す仕組み
・プラグインの仕様と注意事項
・イベント番号一覧
・ルール名／モード名の登録

【プラグインについて】
「プラグイン」とは、ゲームのルールやモードの動作を記述した拡張子が.cのファイルです。
早い話、正体はただのyaneuraoGameScript2000のスクリプトファイルです。
scriptフォルダ内のゲームのスクリプトと文法は全く同じです。
プラグインはゲーム内の変数を弄ったり関数を呼び出したりしてゲームを操作できます。

【プラグインを呼び出す仕組み】
プラグインの一覧はplugins.defに記憶されています。
拡張子が.defになっていますが、中身はygs2kのスクリプトです。
このファイルはHEBORIS.EXEの起動時にscript\gamestart.cと共に読み込まれ、コンパイルされます。
（実際はgamestart.cからinclude文で読み込んでいる）
そして事あるごとにplugin.def内のexecutePlugin関数を呼び出します。
executePlugin関数はプラグインのメイン関数を呼び出します。

【プラグインの仕様と注意事項】
//prefix:[任意の文字列]
	ソース中のどこかに必ず書く必要があります。
	これが無いとheboplugin.exeで読み込んでOKボタンを押しても、次回起動時には消えてしまいます。
	[任意の文字列]には、好きな長さのアルファベットを指定できます。

void [任意の文字列]PluginEvent(int player, int event, int *param)
	プラグインのメイン関数です。事あるごとに呼び出されます。
	[任意の文字列]には、好きな長さのアルファベットを指定できますが
	この文字列は//prefix:で指定した文字列と完全に同じである必要があります。

	[×]
	//prefix:hebo
	
	void nullpoPluginEvent(int player, int event, int *param) {
		…
	}

	[○]
	//prefix:hebo
	
	void heboPluginEvent(int player, int event, int *param) {
		…
	}

プラグインのメイン関数の引数について
	player
		プレイヤー番号です。1P側の場合は0、2P側の場合は1になります。

	event
		イベント番号です。どんなタイミングで関数が呼び出されたかによって値が異なります。
		（イベント番号の一覧は後記）

	*param
		パラメータです。何らかの変数へのポインタになっています。
		どんな変数へのポインタかはイベント番号に依存します。

変数と関数の命名に関する注意事項
	グローバル変数（関数の外で宣言する変数）の名前の先端、および関数の名前の先端には
	必ず//prefix:で指定した文字列を入れてください。
	これを守らないと、他のプラグインやゲームスクリプトと名前の衝突が発生する危険性があります。

	[×]
	//prefix:hebo
	int ModeNo;
	
	void SubRoutine(int player) {
		…
	}

	[○]
	//prefix:hebo
	int heboModeNo;
	
	void heboSubRoutine(int player) {
		…
	}

	※ローカル変数（関数の中で宣言する変数）の名前、及び引数の名前に制限はありません。

【イベント番号一覧】
+----+---------------------+-------------------------------------------+--+
|番号|関数                 |説明                                       |パ|
+----+---------------------+-------------------------------------------+--+
|0   |initialize           |ヘボリスの起動時                           |×|
|    |                     |ルール／モードの登録はこのタイミングで     |  |
|1   |spriteTime           |ESCキーチェック、および画面描画の直前      |×|
|2   |playerInitial        |ゲーム開始時の初期化処理の最初             |○|
|3   |versusInit           |NEXTブロック生成処理                       |○|
|4   |playerExecute        |ゲームのメイン処理の実行前                 |○|
|5   |statReady            |READY→GO!の処理の最初                     |○|
|6   |statMove             |ブロックの出現＆移動処理の最初             |○|
|7   |subMoveInit          |ブロックの出現処理                         |※|
|    |                     |param[0]を1にすると通常の処理をスキップして|  |
|    |                     |ブロックの移動処理のみを実行               |  |
|    |                     |param[0]を2にすると通常の処理とブロックの  |  |
|    |                     |移動処理をスキップ                         |  |
|    |                     |param[1]はホールド処理だったら1、それ以外0 |  |
|8   |subMoveMain          |ブロックの移動処理                         |○|
|9   |wallKick             |壁蹴り処理                                 |※|
|    |                     |param[0]を0にすると失敗、1にすると成功扱い |  |
|    |                     |param[1]は回転後の向き                     |  |
|    |                     |param[2]は回転方向（-1=左 1=右 2=180度）   |  |
|10  |statErase            |ブロックを置いた後の待ち時間               |○|
|11  |statEraseBlock       |ライン消去処理の最初                       |○|
|12  |statEraseBlock       |ラインを消去した瞬間                       |※|
|    |                     |param[0]はライン数                         |  |
|    |                     |param[1]はアイテム消去フラグ               |  |
|13  |statEraseBlock       |上にあったブロックが落下した瞬間           |※|
|    |                     |（param[0]はライン数）                     |  |
|14  |viewBack             |背景の表示                                 |○|
|15  |viewScore            |スコア表示（ヘボリス側は何もしない）       |×|
|16  |selectRuleAndMode    |ルール選択でAボタンが押されたとき          |※|
|    |                     |（param[0]を0にすると次の画面に進ませない）|  |
|17  |selectRuleAndMode    |モード選択でAボタンが押されたとき          |※|
|    |                     |（param[0]を0にすると次の画面に進ませない）|  |
|18  |playerInitial        |ゲーム開始時の初期化処理の最後             |×|
|19  |subMoveInit          |ブロックの初期位置を設定する直前           |※|
|    |                     |パラメータはイベント7と同じだけどparam[0]に|  |
|    |                     |意味はありません                           |  |
|20  |statGameOver         |ゲームオーバー処理の最初                   |○|
|21  |statResult           |結果表示                                   |○|
|22  |statGameOver2        |ゲームオーバー表示                         |○|
|23  |statEnding           |エンディング処理の最初                     |○|
|24  |statEnding           |ending[player] = 1または4のとき、ブロックが|×|
|    |                     |消滅する演出が終わったあと                 |  |
|25  |statEnding           |ending[player] = 3のときの最初             |※|
|    |                     |param[0]を弄ることにより演出を変更可能     |  |
|    |                     |0:EXCELLENT                                |  |
|    |                     |1:YOU ARE GRAND MASTER!!                   |  |
|    |                     |2:YOU ARE GOD                              |  |
|    |                     |3:CLEAR!!                                  |  |
|    |                     |4:CLEAR                                    |  |
|    |                     |5:何も表示せず、即座にゲームオーバー処理へ |  |
|    |                     |6:何も表示しない                           |  |
|    |                     |-1:通常の処理をスキップする                |  |
|26  |statEnding           |ending[player] = 3のときの最後             |×|
|27  |increment_time       |タイム増加／リプレイ記録処理の最初         |○|
|28  |increment_time       |タイム増加／リプレイ記録処理の最後         |×|
|29  |viewFieldBackground  |フィールドの背景表示                       |○|
|    |                     |標準ではご先祖様出現の時に白黒背景を表示   |  |
|30  |viewField            |フィールド表示処理の最初                   |○|
|31  |viewFieldFrame       |フィールドの枠の表示処理                   |○|
|32  |viewNextBlock        |NEXTブロックの表示処理                     |○|
|33  |viewHoldBlock        |HOLDブロックの表示処理                     |○|
|34  |viewFieldBlock       |フィールドのブロックの表示処理             |○|
|35  |lastProc             |ポーズ処理／捨てゲー処理の後               |×|
|36  |staffRoll            |スタッフロール描画処理                     |○|
|37  |main                 |ゲーム画面からタイトルに戻るとき           |×|
|38  |statReady            |ゲームが始まる瞬間                         |×|
|39  |saveReplayData       |リプレイ保存処理の途中                     |×|
|    |                     |ルールはsaveBuf[400]〜saveBuf[899]を       |  |
|    |                     |モードはsaveBuf[900]〜saveBuf[1399]を      |  |
|    |                     |自由に使うことができます                   |  |
|40  |loadReplayData       |リプレイ読み込み処理の途中                 |×|
|41  |main                 |タイトルからゲーム画面に移動するとき       |×|
|42  |objectCreate         |演出オブジェクトを作成するとき             |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]は引数s                            |  |
|    |                     |param[2]は引数x                            |  |
|    |                     |param[3]は引数y                            |  |
|    |                     |param[4]は引数v                            |  |
|    |                     |param[5]は引数w                            |  |
|    |                     |param[6]は引数j                            |  |
|    |                     |param[7]は引数c                            |  |
|43  |objectExecute        |演出オブジェクトを実行するとき             |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|    |                     |param[2]はオブジェクトの種類               |  |
|44  |objectStatBlock      |ライン消去アニメーション                   |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|45  |objectPopBlock       |ブロックが飛び散るアニメーション           |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|46  |objectHanabi         |花火のアニメーション                       |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|47  |objectBravo          |全消しアニメーション                       |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|48  |softDrop             |ソフトドロップ処理の最初                   |○|
|49  |hardDrop             |ハードドロップ処理の最初                   |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]は接地後のY座標                    |  |
|50  |objectItemErase      |アイテム消去アニメーション                 |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|51  |objectShootingStarP  |流れ星（座標計算）                         |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|52  |objectShootingStarC  |流れ星（描画）                             |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はオブジェクトの番号               |  |
|53  |statEraseBlock       |ブロックが消える処理の途中                 |※|
|    |                     |param[0]は消去されるブロックのX座標        |  |
|    |                     |param[1]は消去されるブロックのY座標        |  |
|54  |replayDetail         |リプレイ詳細画面（ルール）                 |※|
|    |                     |param[0]はリプレイの番号                   |  |
|55  |replayDetail         |リプレイ詳細画面（モード）                 |※|
|    |                     |param[0]はリプレイの番号                   |  |
|56  |loadAllSystemGraphics|グラフィック読み込み処理の最後             |×|
|    |                     |グラフィックの読み込みはこのタイミングで   |  |
|57  |loadSystemSE         |効果音読み込み処理の最後                   |×|
|    |                     |効果音の読み込みはこのタイミングで         |  |
|58  |isTSpin              |3-CORNER/3-CORNER NO KICKのT-SPIN判定      |※|
|    |                     |T-SPIN成立の場合はparam[0]を1にしてください|  |
|59  |subMoveLock          |ライン消しなしのT-SPINをしたとき           |×|
|60  |subMoveLock          |ライン消しがなかったとき                   |○|
|61  |padRepeat            |横溜め処理                                 |○|
|62  |getPressState        |キー状態を取得（押しつづけあり）           |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はキーの番号                       |  |
|63  |getPushState         |キー状態を取得（押しつづけなし）           |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     |param[1]はキーの番号                       |  |
|64  |judgeBlock           |ブロックの当たり判定                       |※|
|    |                     |param[0]を1にすると通常の処理をスキップ    |  |
|    |                     | (壁に当たらなかった扱いになる)            |  |
|    |                     |param[0]を2にすると通常の処理をスキップ    |  |
|    |                     | (壁に当たった扱いになる)                  |  |
|    |                     |param[1]はX座標                            |  |
|    |                     |param[2]はY座標                            |  |
|    |                     |param[3]はブロックの種類                   |  |
|    |                     |param[4]はブロックの向き                   |  |
|65  |pinchCheck           |ピンチかどうかのチェック処理               |○|
|    |                     |pinch[player]を1にすると警告音が鳴ります   |  |
|66  |debugMenu            |デバッグメニューでRULE DEBUGを選んだとき   |×|
|67  |debugMenu            |デバッグメニューでMODE DEBUGを選んだとき   |×|
|68  |statCustom           |stat[player] = 2のとき                     |×|
|69  |upLineProc           |せり上がり処理                             |○|
|70  |statReplaySave       |リプレイ保存画面でRETRYを選んだとき        |○|
+----+---------------------+-------------------------------------------+--+

「パ」の×はparam[0]にダミー変数が入っている（変えても効果がない）ことを
○はparam[0]に1を代入すると通常の処理をスキップすることを
※は特殊な場合を意味しています。

【ルール名／モード名の登録】
event == 0（起動時）のときは必ずルール／モード名の登録を行ってください。
それ以外のイベントでは、現在のルール／モードが割り当てられたルール／モード番号と一致しているかどうか調べてください。

[例]
//prefix:test
int testModeNo = -1;	// モード番号

void testPluginEvent(int player, int event, int *param) {
	// モードが違うなら戻る（モードを登録するタイミング以外の場合）
	if((event != 0) && (gameMode[player] != testModeNo)) return;
	
	if(event == 0) {
		testModeNo = addModePlugin("TEST");	// モードを登録する
	} else if(event == 2) {
		…
	} else if(event == 17) {
		…
	}
}

[関数の説明]
addRulePlugin(str *name)
	ルール名の登録。
	str *nameの部分にはルール名を""で囲って指定します。（1〜31文字）
	成功すると割り当てられたルール番号（0以上の整数）が戻り値になります。
	ルールが200個以上登録されている、名前が無い、名前が長すぎる、同名のルールが既に存在すると-1が戻り値になります。
	ルール番号はHEBORIS.EXEを終了するまで変わりません。

addModePlugin(str *name)
	モード名の登録。基本はルール名の登録と同じです。

[グローバル変数]
rots[player]
	現在のルール番号

gameMode[player]
	現在のモード番号
