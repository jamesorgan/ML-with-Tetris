// クラシックルール ブロックデータ
int		blkDataX[7 * 4 * 4] =	// ユニットを構成するブロックの相対Ｘ位置(7種類/4角度/4ブロック)
{
	0, 1, 2, 3,			2, 2, 2, 2,			3, 2, 1, 0,			2, 2, 2, 2,	// I
	1, 0, 0, 2,			1, 0, 1, 1,			1, 2, 2, 0,			1, 2, 1, 1,	// L
	1, 2, 2, 1,			2, 2, 1, 1,			2, 1, 1, 2,			1, 1, 2, 2,	// O
	1, 0, 1, 2,			2, 2, 1, 1,			1, 2, 1, 0,			1, 1, 2, 2,	// Z
	1, 0, 1, 2,			1, 1, 0, 1,			1, 2, 1, 0,			1, 1, 2, 1,	// T
	1, 0, 2, 2,			1, 1, 1, 0,			1, 2, 0, 0,			1, 1, 1, 2,	// J
	1, 2, 1, 0,			1, 1, 0, 0,			1, 0, 1, 2,			0, 0, 1, 1,	// S
};

int		blkDataY[7 * 4 * 4] =	// ユニットを構成するブロックの相対Ｙ位置(7種類/4角度/4ブロック)
{
	1, 1, 1, 1,			0, 1, 2, 3,			1, 1, 1, 1,			3, 2, 1, 0,	// I
	1, 2, 1, 1,			1, 0, 0, 2,			2, 1, 2, 2,			1, 2, 2, 0,	// L
	1, 1, 2, 2,			1, 2, 2, 1,			2, 2, 1, 1,			2, 1, 1, 2,	// O
	1, 1, 2, 2,			1, 0, 1, 2,			2, 2, 1, 1,			1, 2, 1, 0,	// Z
	1, 1, 2, 1,			1, 0, 1, 2,			2, 2, 1, 2,			1, 2, 1, 0,	// T
	1, 1, 1, 2,			1, 0, 2, 2,			2, 2, 2, 1,			1, 2, 0, 0,	// J
	1, 1, 2, 2,			1, 2, 1, 0,			2, 2, 1, 1,			1, 0, 1, 2,	// S
};

// クラシックルールのブロックの色
// 0=灰 1=赤 2=橙 3=黄 4=緑 5=水 6=青 7=紫
int		ccol[7] = {1,2,3,4,5,6,7};

// ワールドルール ブロックデータ
int		blkWDataX[7 * 4 * 4] =	// worldタイプミノ 相対X位置
{
	0, 1, 2, 3, 		2, 2, 2, 2, 		3, 2, 1, 0, 		1, 1, 1, 1, // I
	2, 2, 1, 0, 		2, 1, 1, 1, 		0, 0, 1, 2, 		0, 1, 1, 1, // L
	1, 2, 2, 1, 		2, 2, 1, 1, 		2, 1, 1, 2, 		1, 1, 2, 2, // O
	0, 1, 1, 2, 		2, 2, 1, 1, 		2, 1, 1, 0, 		0, 0, 1, 1, // Z
	1, 0, 1, 2, 		2, 1, 1, 1, 		1, 2, 1, 0, 		0, 1, 1, 1, // T
	0, 0, 1, 2, 		2, 1, 1, 1, 		2, 2, 1, 0, 		0, 1, 1, 1, // J
	2, 1, 1, 0, 		2, 2, 1, 1, 		0, 1, 1, 2, 		0, 0, 1, 1, // S
};

int		blkWDataY[7 * 4 * 4] =	// worldタイプミノ 相対Y位置
{
	1, 1, 1, 1, 		0, 1, 2, 3, 		2, 2, 2, 2, 		3, 2, 1, 0, // I
	0, 1, 1, 1, 		2, 2, 1, 0, 		2, 1, 1, 1, 		0, 0, 1, 2, // L
	0, 0, 1, 1, 		0, 1, 1, 0, 		1, 1, 0, 0, 		1, 0, 0, 1, // O
	0, 0, 1, 1, 		0, 1, 1, 2, 		2, 2, 1, 1, 		2, 1, 1, 0, // Z
	0, 1, 1, 1, 		1, 0, 1, 2, 		2, 1, 1, 1, 		1, 2, 1, 0, // T
	0, 1, 1, 1, 		0, 0, 1, 2, 		2, 1, 1, 1, 		2, 2, 1, 0, // J
	0, 0, 1, 1, 		2, 1, 1, 0, 		2, 2, 1, 1, 		0, 1, 1, 2, // S
};

// I型ブロックの壁蹴りテーブル
int		iBlockKickTable[4 * 4 * 2 * 2] = {
	// 左回転
	 2, 0,		-1, 0,		-1, -2,		 2,  1,		// 0>>3
	 2, 0,		-1, 0,		 2, -1,		-1,  2,		// 1>>0
	-2, 0,		 1, 0,		-2, -1,		 1,  1,		// 2>>1
	 1, 0,		-2, 0,		 1, -2,		-2,  1,		// 3>>2
	
	// 右回転
	-2, 0,		 1, 0,		-2,  1,		 1, -2,		// 0>>1
	-1, 0,		 2, 0,		 2,  1,		-1, -2,		// 1>>2
	 2, 0,		-1, 0,		-1,  1,		 2, -1,		// 2>>3
	-2, 0,		 1, 0,		 1,  2,		-2, -1		// 3>>0
};

// 他のブロックの壁蹴りテーブル
int		otherBlockKickTable[4 * 4 * 2 * 2] = {
	// 左回転
	 1, 0,		 1, -1,		 0,  2,		 1,  2,		// 0>>3
	 1, 0,		 1,  1,		 0, -2,		 1, -2,		// 1>>0
	-1, 0,		-1, -1,		 0,  2,		-1,  2,		// 2>>1
	-1, 0,		-1,  1,		 0, -2,		-1, -2,		// 3>>2
	
	// 右回転
	-1, 0,		-1, -1,		 0,  2,		-1,  2,		// 0>>1
	 1, 0,		 1,  1,		 0, -2,		 1, -2,		// 1>>2
	 1, 0,		 1, -1,		 0,  2,		 1,  2,		// 2>>3
	-1, 0,		-1,  1,		 0, -2,		-1, -2		// 3>>0
};

// All kick tables based on "TGM-ACE SRS study" (http://www.the-shell.net/img/srs_study.html)

// ワールドルールのブロックの色
// 0=灰 1=赤 2=橙 3=黄 4=緑 5=水 6=青 7=紫
int		wcol[7] = {5,2,3,1,7,6,4};

// 180度回転壁蹴りテーブル（I以外）
// 偶数番号は2回180°回転すれば元の位置に戻る（かもしれない）が、
// 奇数番号は下への補正が優先される（かもしれない）

// #LITE30.9から
int otherBlock180KickTable[11 * 2 * 4] = {
	 1, 0,   2, 0,   1, 1,   2, 1,  -1, 0,  -2, 0,  -1, 1,  -2, 1,   0,-1,   3, 0,  -3, 0,		// 0>>2─┐
	 0, 1,   0, 2,  -1, 1,  -1, 2,   0,-1,   0,-2,  -1,-1,  -1,-2,   1, 0,   0, 3,   0,-3,		// 1>>3─┼┐
	-1, 0,  -2, 0,  -1,-1,  -2,-1,   1, 0,   2, 0,   1,-1,   2,-1,   0, 1,  -3, 0,   3, 0,		// 2>>0─┘│
	 0, 1,   0, 2,   1, 1,   1, 2,   0,-1,   0,-2,   1,-1,   1,-2,  -1, 0,   0, 3,   0,-3		// 3>>1──┘
};

// #LITE30.8まで
int otherBlock180KickTableOld[11 * 2 * 4] = {
	 1, 0,   2, 0,   1, 1,   2, 1,  -1, 0,  -2, 0,  -1, 1,  -2, 1,   3, 0,  -3, 0,   0,-1,		// 0>>2─┐
	 0, 1,   0, 2,  -1, 1,  -1, 2,   0,-1,   0,-2,  -1,-1,  -1,-2,   0, 3,   0,-3,   1, 0,		// 1>>3─┼┐
	-1, 0,  -2, 0,  -1,-1,  -2,-1,   1, 0,   2, 0,   1,-1,   2,-1,  -3, 0,   3, 0,   0, 1,		// 2>>0─┘│
	 0, 1,   0, 2,   1, 1,   1, 2,   0,-1,   0,-2,   1,-1,   1,-2,   0, 3,   0,-3,  -1, 0		// 3>>1──┘
};

// 180度回転壁蹴りテーブル（I）
// やり方次第では驚異の壁飛ばし、壁抜けが可能ww
int iBlock180KickTable[11 * 2 * 4] = {
	 -1, 0,  -2, 0,   1, 0,   2, 0,   0, 1,    0,0, 0,0, 0,0, 0,0, 0,0, 0,0,
	  0, 1,   0, 2,   0,-1,   0,-2,  -1, 0,    0,0, 0,0, 0,0, 0,0, 0,0, 0,0,
	  1, 0,   2, 0,  -1, 0,  -2, 0,   0,-1,    0,0, 0,0, 0,0, 0,0, 0,0, 0,0,
	  0, 1,   0, 2,   0,-1,   0,-2,   1, 0,    0,0, 0,0, 0,0, 0,0, 0,0, 0,0
};

int		blkDDataX[7 * 4 * 4] =	// DRS用相対Ｘ位置(7種類/ 4角度/ 4ブロック)
{
	0, 1, 2, 3, 		2, 2, 2, 2, 		3, 2, 1, 0, 		1, 1, 1, 1,	// I
	1, 0, 0, 2, 		1, 0, 1, 1, 		1, 2, 2, 0, 		1, 2, 1, 1,	// L
	1, 2, 2, 1, 		2, 2, 1, 1, 		2, 1, 1, 2, 		1, 1, 2, 2,	// O
	1, 0, 1, 2, 		2, 2, 1, 1, 		1, 2, 1, 0, 		0, 0, 1, 1,	// Z
	1, 0, 1, 2, 		1, 1, 0, 1, 		1, 2, 1, 0, 		1, 1, 2, 1,	// T
	1, 0, 2, 2, 		1, 1, 1, 0, 		1, 2, 0, 0, 		1, 1, 1, 2,	// J
	1, 2, 1, 0, 		2, 2, 1, 1, 		1, 0, 1, 2, 		0, 0, 1, 1,	// S
};

int		blkDDataY[7 * 4 * 4] =	// DRS用相対Ｙ位置(7種類/ 4角度/ 4ブロック)
{
	2, 2, 2, 2, 		0, 1, 2, 3, 		2, 2, 2, 2, 		3, 2, 1, 0,	// I #LITE30.30でズレ修正
	1, 2, 1, 1, 		1, 0, 0, 2, 		2, 1, 2, 2, 		1, 2, 2, 0,	// L
	1, 1, 2, 2, 		1, 2, 2, 1, 		2, 2, 1, 1, 		2, 1, 1, 2,	// O
	1, 1, 2, 2, 		1, 0, 1, 2, 		2, 2, 1, 1, 		1, 2, 1, 0,	// Z
	1, 1, 2, 1, 		1, 0, 1, 2, 		2, 2, 1, 2, 		1, 2, 1, 0,	// T
	1, 1, 1, 2, 		1, 0, 2, 2, 		2, 2, 2, 1, 		1, 2, 0, 0,	// J
	1, 1, 2, 2, 		1, 2, 1, 0, 		2, 2, 1, 1, 		1, 0, 1, 2,	// S
};

// ブロックの繋がりに関するデータ
// 1:上 2:下 4:左 8:右
// ２方向以上の組み合わせは足し合わせて行います

int		blkDataL[7 * 4 * 4] =	// クラシック
{
	 8,12,12, 4,		 2, 3, 3, 1,		 4,12,12, 8,		 1, 3, 3, 2,	// I
	12, 1,10, 4,		 3, 8, 6, 1,		12, 2, 5, 8,		 3, 4, 9, 2,	// L
	10, 6, 5, 9,		 6, 5, 9,10,		 5, 9,10, 6,		 9,10, 6, 5,	// O
	 6, 8, 9, 4,		 5, 2,10, 1,		 9, 4, 6, 8,		10, 1, 5, 2,	// Z
	14, 8, 1, 4,		 7, 2, 8, 1,		13, 4, 2, 8,		11, 1, 4, 2,	// T
	12, 8, 6, 1,		 3, 2, 5, 8,		12, 4, 9, 2,		 3, 1,10, 4,	// J
	10, 4, 5, 8,		 6, 1, 9, 2,		 5, 8,10, 4,		 9, 2, 6, 1,	// S
};

int		blkWDataL[7 * 4 * 4] =	// ワールド
{
	 8,12,12, 4,		 2, 3, 3, 1,		 4,12,12, 8,		 1, 3, 3, 2,	// I
	 2, 5,12, 8,		 4, 9, 3, 2,		 1,10,12, 4,		 8, 6, 3, 1,	// L
	10, 6, 5, 9,		 6, 5, 9,10,		 5, 9,10, 6,		 9,10, 6, 5,	// O
	 8, 6, 9, 4,		 2, 5,10, 1,		 4, 9, 6, 8,		 1,10, 5, 2,	// Z
	 2, 8,13, 4,		 4, 2,11, 1,		 1, 4,14, 8,		 8, 1, 7, 2,	// T
	 2, 9,12, 4,		 4,10, 3, 1,		 1, 6,12, 8,		 8, 5, 3, 2,	// J
	 4,10, 5, 8,		 1, 6, 9, 2,		 8, 5,10, 4,		 2, 9, 6, 1,	// S
};

int		blkDDataL[7 * 4 * 4] =	// DRS
{
	 8,12,12, 4,		 2, 3, 3, 1,		 4,12,12, 8,		 1, 3, 3, 2,	// I
	12, 1,10, 4,		 3, 8, 6, 1,		12, 2, 5, 8,		 3, 4, 9, 2,	// L
	10, 6, 5, 9,		 6, 5, 9,10,		 5, 9,10, 6,		 9,10, 6, 5,	// O
	 6, 8, 9, 4,		 5, 2,10, 1,		 9, 4, 6, 8,		10, 1, 5, 2,	// Z
	14, 8, 1, 4,		 7, 2, 8, 1,		13, 4, 2, 8,		11, 1, 4, 2,	// T
	12, 8, 6, 1,		 3, 2, 5, 8,		12, 4, 9, 2,		 3, 1,10, 4,	// J
	10, 4, 5, 8,		 6, 1, 9, 2,		 5, 8,10, 4,		 9, 2, 6, 1,	// S
};
